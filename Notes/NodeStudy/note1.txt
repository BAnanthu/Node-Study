Node.js is a platform built on Chrome's JavaScript runtime for easily building fast and scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.

Node.js is an open source, cross-platform runtime environment for developing server-side and networking applications. Node.js applications are written in JavaScript, and can be run within the Node.js runtime on OS X, Microsoft Windows, and Linux.

Features of node js
--------------------

1) Asynchronous and Event Driven − All APIs of Node.js library are asynchronous, that is, non-blocking. It essentially means a Node.js based server never waits for an API to return data. The server moves to the next API after calling it and a notification mechanism of Events of Node.js helps the server to get a response from the previous API call.

2) Very Fast − Being built on Google Chrome's V8 JavaScript Engine, Node.js library is very fast in code execution.

3) Single Threaded but Highly Scalable − Node.js uses a single threaded model with event looping. Event mechanism helps the server to respond in a non-blocking way and makes the server highly scalable as opposed to traditional servers which create limited threads to handle requests. Node.js uses a single threaded program and the same program can provide service to a much larger number of requests than traditional servers like Apache HTTP Server.

4) No Buffering − Node.js applications never buffer any data. These applications simply output the data in chunks.


Installaton of node js
------------------------------

You can install nodejs from nodejs.org


REPL in terminal
---------------------

REPL stands for Read Eval Print Loop and it represents a computer environment like a Windows console or Unix/Linux shell where a command is entered and the system responds with an output in an interactive mode. Node.js or Node comes bundled with a REPL environment. It performs the following tasks −

Read − Reads user's input, parses the input into JavaScript data-structure, and stores in memory.

Eval − Takes and evaluates the data structure.

Print − Prints the result.

Loop − Loops the above command until the user presses ctrl-c twice.


The REPL feature of Node is very useful in experimenting with Node.js codes and to debug JavaScript codes.


Online REPL Terminal
-------------------------


To simplify your learning, we have set up an easy to use Node.js REPL environment online, where you can practice Node.js syntax − Launch Node.js REPL Terminal 

Starting REPL
REPL can be started by simply running node on shell/console without any arguments as follows.

$ node
You will see the REPL Command prompt > where you can type any Node.js command −

$ node
>
Simple Expression
Let's try a simple mathematics at the Node.js REPL command prompt −

$ node
> 1 + 3
4
> 1 + ( 2 * 3 ) - 4
3
>

REPL Commands
---------------
ctrl + c − terminate the current command.

ctrl + c twice − terminate the Node REPL.

ctrl + d − terminate the Node REPL.

Up/Down Keys − see command history and modify previous commands.

tab Keys − list of current commands.

.help − list of all commands.

.break − exit from multiline expression.

.clear − exit from multiline expression.

.save filename − save the current Node REPL session to a file.




.load filename − load file content in current Node REPL session.


